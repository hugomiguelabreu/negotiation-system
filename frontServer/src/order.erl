%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.1
-module(order).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("order.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Order'() :: #'Order'{}.
-export_type(['Order'/0]).

-spec encode_msg(#'Order'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'Order'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Order'{} -> e_msg_Order(Msg, TrUserData)
    end.



e_msg_Order(Msg, TrUserData) ->
    e_msg_Order(Msg, <<>>, TrUserData).


e_msg_Order(#'Order'{quantity = F1, price = F2,
		     user = F3, symbol = F4, orderType = F5},
	    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0.0 -> B1;
		     true -> e_type_float(TrF2, <<B1/binary, 21>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= false -> B4;
		true -> e_type_bool(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_float(V, Bin) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin) ->
    <<Bin/binary, 0:16, 192, 127>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Order' ->
	  try d_msg_Order(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Order', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_Order(Bin, TrUserData) ->
    dfp_read_field_def_Order(Bin, 0, 0, id(0, TrUserData),
			     id(0.0, TrUserData), id(<<>>, TrUserData),
			     id(<<>>, TrUserData), id(false, TrUserData),
			     TrUserData).

dfp_read_field_def_Order(<<8, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_quantity(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_Order(<<21, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_price(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_Order(<<26, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_user(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
dfp_read_field_def_Order(<<34, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_symbol(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_Order(<<40, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_orderType(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_Order(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, _) ->
    #'Order'{quantity = F@_1, price = F@_2, user = F@_3,
	     symbol = F@_4, orderType = F@_5};
dfp_read_field_def_Order(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Order(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData).

dg_read_field_def_Order(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Order(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Order(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Order_quantity(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      21 ->
	  d_field_Order_price(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      26 ->
	  d_field_Order_user(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, TrUserData);
      34 ->
	  d_field_Order_symbol(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      40 ->
	  d_field_Order_orderType(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Order(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, TrUserData);
	    1 ->
		skip_64_Order(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData);
	    2 ->
		skip_length_delimited_Order(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Order(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Order(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData)
	  end
    end;
dg_read_field_def_Order(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, _) ->
    #'Order'{quantity = F@_1, price = F@_2, user = F@_3,
	     symbol = F@_4, orderType = F@_5}.

d_field_Order_quantity(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Order_quantity(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Order_quantity(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_Order(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, F@_4, F@_5, TrUserData).

d_field_Order_price(<<0:16, 128, 127, Rest/binary>>, Z1,
		    Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, infinity,
			     F@_3, F@_4, F@_5, TrUserData);
d_field_Order_price(<<0:16, 128, 255, Rest/binary>>, Z1,
		    Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1,
			     '-infinity', F@_3, F@_4, F@_5, TrUserData);
d_field_Order_price(<<_:16, 1:1, _:7, _:1, 127:7,
		      Rest/binary>>,
		    Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, nan, F@_3,
			     F@_4, F@_5, TrUserData);
d_field_Order_price(<<Value:32/little-float,
		      Rest/binary>>,
		    Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, Value,
			     F@_3, F@_4, F@_5, TrUserData).

d_field_Order_user(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Order_user(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Order_user(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Order(RestF, 0, 0, F@_1, F@_2,
			     NewFValue, F@_4, F@_5, TrUserData).

d_field_Order_symbol(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Order_symbol(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Order_symbol(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Order(RestF, 0, 0, F@_1, F@_2, F@_3,
			     NewFValue, F@_5, TrUserData).

d_field_Order_orderType(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Order_orderType(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Order_orderType(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    dfp_read_field_def_Order(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, NewFValue, TrUserData).

skip_varint_Order(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, TrUserData);
skip_varint_Order(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_length_delimited_Order(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Order(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_Order(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Order(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_group_Order(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Order(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_32_Order(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_64_Order(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'Order'{} -> merge_msg_Order(Prev, New, TrUserData)
    end.

merge_msg_Order(#'Order'{quantity = PFquantity,
			 price = PFprice, user = PFuser, symbol = PFsymbol,
			 orderType = PForderType},
		#'Order'{quantity = NFquantity, price = NFprice,
			 user = NFuser, symbol = NFsymbol,
			 orderType = NForderType},
		_) ->
    #'Order'{quantity =
		 if NFquantity =:= undefined -> PFquantity;
		    true -> NFquantity
		 end,
	     price =
		 if NFprice =:= undefined -> PFprice;
		    true -> NFprice
		 end,
	     user =
		 if NFuser =:= undefined -> PFuser;
		    true -> NFuser
		 end,
	     symbol =
		 if NFsymbol =:= undefined -> PFsymbol;
		    true -> NFsymbol
		 end,
	     orderType =
		 if NForderType =:= undefined -> PForderType;
		    true -> NForderType
		 end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Order'{} -> v_msg_Order(Msg, ['Order'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Order/3}).
v_msg_Order(#'Order'{quantity = F1, price = F2,
		     user = F3, symbol = F4, orderType = F5},
	    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [quantity | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_float(F2, [price | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [user | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [symbol | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [orderType | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_float/2}).
v_type_float(N, _Path) when is_float(N) -> ok;
v_type_float(N, _Path) when is_integer(N) -> ok;
v_type_float(infinity, _Path) -> ok;
v_type_float('-infinity', _Path) -> ok;
v_type_float(nan, _Path) -> ok;
v_type_float(X, Path) ->
    mk_type_error(bad_float_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{msg, 'Order'},
      [#field{name = quantity, fnum = 1, rnum = 2,
	      type = int32, occurrence = optional, opts = []},
       #field{name = price, fnum = 2, rnum = 3, type = float,
	      occurrence = optional, opts = []},
       #field{name = user, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = symbol, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = orderType, fnum = 5, rnum = 6,
	      type = bool, occurrence = optional, opts = []}]}].


get_msg_names() -> ['Order'].


get_group_names() -> [].


get_msg_or_group_names() -> ['Order'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Order') ->
    [#field{name = quantity, fnum = 1, rnum = 2,
	    type = int32, occurrence = optional, opts = []},
     #field{name = price, fnum = 2, rnum = 3, type = float,
	    occurrence = optional, opts = []},
     #field{name = user, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = symbol, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = orderType, fnum = 5, rnum = 6,
	    type = bool, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> order.



gpb_version_as_string() ->
    "4.1.1".

gpb_version_as_list() ->
    [4,1,1].
