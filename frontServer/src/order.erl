%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.1
-module(order).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Order.Type'/1, 'enum_value_by_symbol_Order.Type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("order.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'Order.Type'() :: 'BUY' | 'SELL'.
-export_type(['Order.Type'/0]).

%% message types
-type 'Order'() :: #'Order'{}.
-export_type(['Order'/0]).

-spec encode_msg(#'Order'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'Order'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Order'{} -> e_msg_Order(Msg, TrUserData)
    end.



e_msg_Order(Msg, TrUserData) ->
    e_msg_Order(Msg, <<>>, TrUserData).


e_msg_Order(#'Order'{orderType = F1, symbol = F2,
		     quantity = F3, price = F4, user = F5},
	    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_Order.Type'(TrF1, <<Bin/binary, 0>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 10>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 16>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_double(TrF4, <<B3/binary, 25>>)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 34>>)
    end.

'e_enum_Order.Type'('BUY', Bin) -> <<Bin/binary, 1>>;
'e_enum_Order.Type'('SELL', Bin) -> <<Bin/binary, 2>>;
'e_enum_Order.Type'(V, Bin) -> e_varint(V, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_double(V, Bin) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin) ->
    <<Bin/binary, 0:48, 248, 127>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Order' ->
	  try d_msg_Order(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Order', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_Order(Bin, TrUserData) ->
    dfp_read_field_def_Order(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Order(<<0, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_orderType(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_Order(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_symbol(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_Order(<<16, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_quantity(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_Order(<<25, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_price(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_Order(<<34, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Order_user(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
dfp_read_field_def_Order(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, _) ->
    #'Order'{orderType = F@_1, symbol = F@_2,
	     quantity = F@_3, price = F@_4, user = F@_5};
dfp_read_field_def_Order(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Order(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData).

dg_read_field_def_Order(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Order(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Order(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      0 ->
	  d_field_Order_orderType(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      10 ->
	  d_field_Order_symbol(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      16 ->
	  d_field_Order_quantity(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      25 ->
	  d_field_Order_price(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      34 ->
	  d_field_Order_user(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Order(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, TrUserData);
	    1 ->
		skip_64_Order(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData);
	    2 ->
		skip_length_delimited_Order(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Order(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Order(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData)
	  end
    end;
dg_read_field_def_Order(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, _) ->
    #'Order'{orderType = F@_1, symbol = F@_2,
	     quantity = F@_3, price = F@_4, user = F@_5}.

d_field_Order_orderType(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Order_orderType(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Order_orderType(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {'d_enum_Order.Type'(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						Res
					      end),
			  Rest},
    dfp_read_field_def_Order(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, F@_4, F@_5, TrUserData).

d_field_Order_symbol(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Order_symbol(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Order_symbol(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Order(RestF, 0, 0, F@_1, NewFValue,
			     F@_3, F@_4, F@_5, TrUserData).

d_field_Order_quantity(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Order_quantity(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Order_quantity(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_Order(RestF, 0, 0, F@_1, F@_2,
			     NewFValue, F@_4, F@_5, TrUserData).

d_field_Order_price(<<0:48, 240, 127, Rest/binary>>, Z1,
		    Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     infinity, F@_5, TrUserData);
d_field_Order_price(<<0:48, 240, 255, Rest/binary>>, Z1,
		    Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     '-infinity', F@_5, TrUserData);
d_field_Order_price(<<_:48, 15:4, _:4, _:1, 127:7,
		      Rest/binary>>,
		    Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     nan, F@_5, TrUserData);
d_field_Order_price(<<Value:64/little-float,
		      Rest/binary>>,
		    Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     Value, F@_5, TrUserData).

d_field_Order_user(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Order_user(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Order_user(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Order(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, NewFValue, TrUserData).

skip_varint_Order(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, TrUserData);
skip_varint_Order(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_length_delimited_Order(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Order(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_Order(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Order(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_group_Order(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Order(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_32_Order(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

skip_64_Order(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData).

'd_enum_Order.Type'(1) -> 'BUY';
'd_enum_Order.Type'(2) -> 'SELL';
'd_enum_Order.Type'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'Order'{} -> merge_msg_Order(Prev, New, TrUserData)
    end.

merge_msg_Order(#'Order'{},
		#'Order'{orderType = NForderType, symbol = NFsymbol,
			 quantity = NFquantity, price = NFprice, user = NFuser},
		_) ->
    #'Order'{orderType = NForderType, symbol = NFsymbol,
	     quantity = NFquantity, price = NFprice, user = NFuser}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Order'{} -> v_msg_Order(Msg, ['Order'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Order/3}).
v_msg_Order(#'Order'{orderType = F1, symbol = F2,
		     quantity = F3, price = F4, user = F5},
	    Path, _) ->
    'v_enum_Order.Type'(F1, [orderType | Path]),
    v_type_string(F2, [symbol | Path]),
    v_type_int32(F3, [quantity | Path]),
    v_type_double(F4, [price | Path]),
    v_type_string(F5, [user | Path]),
    ok.

-dialyzer({nowarn_function,'v_enum_Order.Type'/2}).
'v_enum_Order.Type'('BUY', _Path) -> ok;
'v_enum_Order.Type'('SELL', _Path) -> ok;
'v_enum_Order.Type'(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_Order.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'Order.Type'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_double/2}).
v_type_double(N, _Path) when is_float(N) -> ok;
v_type_double(N, _Path) when is_integer(N) -> ok;
v_type_double(infinity, _Path) -> ok;
v_type_double('-infinity', _Path) -> ok;
v_type_double(nan, _Path) -> ok;
v_type_double(X, Path) ->
    mk_type_error(bad_double_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{enum, 'Order.Type'}, [{'BUY', 1}, {'SELL', 2}]},
     {{msg, 'Order'},
      [#field{name = orderType, fnum = 0, rnum = 2,
	      type = {enum, 'Order.Type'}, occurrence = required,
	      opts = []},
       #field{name = symbol, fnum = 1, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = quantity, fnum = 2, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = price, fnum = 3, rnum = 5, type = double,
	      occurrence = required, opts = []},
       #field{name = user, fnum = 4, rnum = 6, type = string,
	      occurrence = required, opts = []}]}].


get_msg_names() -> ['Order'].


get_group_names() -> [].


get_msg_or_group_names() -> ['Order'].


get_enum_names() -> ['Order.Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Order') ->
    [#field{name = orderType, fnum = 0, rnum = 2,
	    type = {enum, 'Order.Type'}, occurrence = required,
	    opts = []},
     #field{name = symbol, fnum = 1, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = quantity, fnum = 2, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = price, fnum = 3, rnum = 5, type = double,
	    occurrence = required, opts = []},
     #field{name = user, fnum = 4, rnum = 6, type = string,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('Order.Type') ->
    [{'BUY', 1}, {'SELL', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('Order.Type', Value) ->
    'enum_symbol_by_value_Order.Type'(Value).


enum_value_by_symbol('Order.Type', Sym) ->
    'enum_value_by_symbol_Order.Type'(Sym).


'enum_symbol_by_value_Order.Type'(1) -> 'BUY';
'enum_symbol_by_value_Order.Type'(2) -> 'SELL'.


'enum_value_by_symbol_Order.Type'('BUY') -> 1;
'enum_value_by_symbol_Order.Type'('SELL') -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> order.



gpb_version_as_string() ->
    "4.1.1".

gpb_version_as_list() ->
    [4,1,1].
